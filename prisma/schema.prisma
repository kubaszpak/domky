// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    listings      Listing[]
    reservations  Reservation[]
    sentMessages  Message[]
    chats         UsersOnChats[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model DateRange {
    id String @id @default(cuid())

    start       DateTime
    end         DateTime
    listingId   String?      @unique
    listing     Listing?     @relation(fields: [listingId], references: [id], onDelete: Cascade)
    reservation Reservation?

    @@index([listingId])
}

model Listing {
    id           String        @id @default(cuid())
    status       ListingStatus @default(ACTIVE)
    name         String
    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    availability DateRange?
    reservations Reservation[]
    images       String        @default("")
    guests       Int
    description  String
    latitude     Float
    longitude    Float
    city         String

    @@index([userId])
}

enum ListingStatus {
    ACTIVE
    SUSPENDED
}

model Reservation {
    id          String            @id @default(cuid())
    status      ReservationStatus @default(PENDING)
    dateRange   DateRange         @relation(fields: [dateRangeId], references: [id])
    dateRangeId String            @unique
    listingId   String
    listing     Listing           @relation(fields: [listingId], references: [id], onDelete: Cascade)
    userId      String
    user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    messages    Message[]

    @@index([dateRangeId])
    @@index([userId, listingId])
}

enum ReservationStatus {
    CONFIRMED
    DECLINED
    PENDING
}

model Chat {
    id        String         @id @default(cuid())
    users     UsersOnChats[]
    messages  Message[]
    updatedAt DateTime       @updatedAt
}

model UsersOnChats {
    chatId String
    chat   Chat   @relation(fields: [chatId], references: [id])
    userId String
    user   User   @relation(fields: [userId], references: [id])

    @@id([userId, chatId])
}

model Message {
    id            String       @id @default(cuid())
    senderId      String
    sender        User         @relation(fields: [senderId], references: [id])
    content       String
    reservationId String?
    reservation   Reservation? @relation(fields: [reservationId], references: [id])
    chatId        String
    chat          Chat         @relation(fields: [chatId], references: [id])
    createdAt     DateTime     @default(now())

    @@index([chatId])
}
