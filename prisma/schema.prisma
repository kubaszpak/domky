// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./db.sqlite"
    // url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    listings      Listing[]
    reservations  Reservation[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model DateRange {
    id String @id @default(cuid())

    start       DateTime
    end         DateTime
    listingId   String?      @unique
    listing     Listing?     @relation(fields: [listingId], references: [id], onDelete: Cascade)
    reservation Reservation?
}

model Listing {
    id           String        @id @default(cuid())
    name         String
    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    availability DateRange?
    reservations Reservation[]
    images       String
    guests       Int
    description  String
    latitude     String
    longitude    String
}

model Reservation {
    id          String    @id @default(cuid())
    dateRange   DateRange @relation(fields: [dateRangeId], references: [id])
    dateRangeId String    @unique
    listingId   String
    listing     Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
